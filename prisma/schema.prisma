// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Post {
  id       String @id @default(cuid())
  author   Player @relation(fields: [authorId], references: [id])
  authorId String
  title    String
  text     String

  // To return `Date`s intact through the API we need to add data transformers
  // https://trpc.io/docs/data-transformers
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

enum UserState {
  active
  disabled
  banned
}

enum Role {
  admin
  moderator
}

model User {
  id         String    @id @default(cuid())
  state      UserState @default(active)
  role       Role?
  name       String
  discordId  String?   @unique
  identities Player[]
}

enum CO {
  adder
}

enum Unit {
  pipeRunner
}

enum Game {
  advanceDatingByWeb
}

enum Achievement {
  fieldTrainingComplete
  winStreak
  underdog
  handicap
  lightningStrike
  destroyer
  fixer
  goldRush
  champion
  grizzledYet
}

model Clan {
  id          String   @id @default(cuid())
  name        String
  description String
  owner       Player   @relation("owner", fields: [ownerId], references: [id])
  ownerId     String
  members     Player[] @relation("member")
}

model Player {
  id               String        @id @default(cuid())
  MMR              MMR[]
  name             String
  secret           Boolean
  youtubeChannelId String?
  twitchUserName   String?
  ChatMessage      ChatMessage[]

  User   User   @relation(fields: [userId], references: [id])
  userId String

  Post           Post[]
  preferences    Json?
  achievements   Achievement[]
  favouriteCOs   CO[]
  favouriteUnits Unit[]
  favouriteGames Game[]

  matches Match[]

  Notes Notes[]

  ownedClans Clan[] @relation(name: "owner")
  clans      Clan[] @relation(name: "member")
}

model Map {
  id      String  @id @default(cuid())
  name    String
  tiles   Json
  matches Match[]
}

model ChatMessage {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())

  author   Player @relation(fields: [authorId], references: [id])
  authorId String

  match   Match?  @relation(fields: [matchId], references: [id]) // if no match, it's the public channel
  matchId String? @map("matchId")
}

enum MatchStatus {
  ready
  playing
  finished
}

enum LeagueType {
  standard
  fog
  highFunds
  dualLeague
  standardTeams
  broken
}

model Notes {
  content String
  public  Boolean @default(false)

  Player   Player @relation(fields: [playerId], references: [id])
  playerId String

  Match   Match  @relation(fields: [matchId], references: [id])
  matchId String

  @@id([playerId, matchId])
}

model MMR {
  leagueType LeagueType
  Player     Player     @relation(fields: [playerId], references: [id])
  playerId   String
  mmr        Int        @default(800)
  topMmr     Int        @default(800)

  @@id([leagueType, playerId])
}

model Match {
  id         String      @id @default(cuid())
  leagueType LeagueType
  status     MatchStatus

  map   Map    @relation(fields: [mapId], references: [id])
  mapId String

  matchState Json // moves table!

  players Player[]
  // playersConsentingToPublishChat Player[]

  chatMessages ChatMessage[]
  chatIsPublic Boolean       @default(false)

  createdAt DateTime @default(now())
  Notes     Notes[]
}

// 1. fractional HP
// 2. move/map data structures
// 3. tiers in general, map/league tiers?
